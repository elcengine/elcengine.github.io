"use strict";(self.webpackChunkelcengine=self.webpackChunkelcengine||[]).push([[460],{5353:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var d=n(4848),i=n(8453);const s={sidebar_position:7},a="Find By ID And Update",o={id:"queries/find-by-id-and-update",title:"Find By ID And Update",description:"The FindByIDAndUpdate method is used to find a single document in the database by its ID and update it.",source:"@site/docs/queries/find-by-id-and-update.md",sourceDirName:"queries",slug:"/queries/find-by-id-and-update",permalink:"/docs/queries/find-by-id-and-update",draft:!1,unlisted:!1,editUrl:"https://github.com/elcengine/elcengine.github.io/tree/main/docs/docs/queries/find-by-id-and-update.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"docSidebar",previous:{title:"Find One And Update",permalink:"/docs/queries/find-one-and-update"},next:{title:"Update One",permalink:"/docs/queries/update-one"}},r={},p=[{value:"Usage",id:"usage",level:2},{value:"Usage with Options",id:"usage-with-options",level:2}];function c(e){const t={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(t.h1,{id:"find-by-id-and-update",children:"Find By ID And Update"}),"\n",(0,d.jsxs)(t.p,{children:["The ",(0,d.jsx)(t.code,{children:"FindByIDAndUpdate"})," method is used to find a single document in the database by its ID and update it."]}),"\n",(0,d.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-go",children:'witcher := WitcherModel.FindByIDAndUpdate(primitive.ObjectIDFromHex("5f9f1b2b6f6b1b6d7f9b1b6d"), primitive.M{"age": 200}).ExecPtr()\n'})}),"\n",(0,d.jsx)(t.p,{children:"The example above finds a single witcher with the given id and updates their age to 200 and returns the document as it was before the update."}),"\n",(0,d.jsx)(t.h2,{id:"usage-with-options",children:"Usage with Options"}),"\n",(0,d.jsxs)(t.p,{children:["You can pass options to the ",(0,d.jsx)(t.code,{children:"FindByIDAndUpdate"})," method to specify how the update operation should be performed."]}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-go",children:'opts := options.FindOneAndUpdateOptions{}\nopts.SetReturnDocument(options.After)\nwitcher := WitcherModel.FindByIDAndUpdate(primitive.ObjectIDFromHex("5f9f1b2b6f6b1b6d7f9b1b6d"), primitive.M{"age": 200}, &opts).ExecPtr()\n'})}),"\n",(0,d.jsxs)(t.p,{children:["In the example above, we are passing options to the ",(0,d.jsx)(t.code,{children:"FindByIDAndUpdate"})," method to return the document after the update operation has been performed."]})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,d.jsx)(t,{...e,children:(0,d.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a});var d=n(6540);const i={},s=d.createContext(i);function a(e){const t=d.useContext(s);return d.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}}}]);