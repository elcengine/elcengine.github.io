"use strict";(self.webpackChunkelcengine=self.webpackChunkelcengine||[]).push([[8151],{443:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>a,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>d,toc:()=>c});var n=s(4848),i=s(8453);const o={sidebar_position:11},r="Upsert",d={id:"queries/upsert",title:"Upsert",description:"The Upsert method is used to update a single document in a collection based on a filter and insert the document if it does not exist.",source:"@site/docs/queries/upsert.md",sourceDirName:"queries",slug:"/queries/upsert",permalink:"/docs/queries/upsert",draft:!1,unlisted:!1,editUrl:"https://github.com/elcengine/elcengine.github.io/tree/main/docs/docs/queries/upsert.md",tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11},sidebar:"docSidebar",previous:{title:"Update Many",permalink:"/docs/queries/update-many"},next:{title:"Count Documents",permalink:"/docs/queries/count-documents"}},a={},c=[{value:"Usage.",id:"usage",level:2},{value:"Usage with Options",id:"usage-with-options",level:2}];function p(e){const t={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"upsert",children:"Upsert"}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"Upsert"})," method is used to update a single document in a collection based on a filter and insert the document if it does not exist."]}),"\n",(0,n.jsx)(t.h2,{id:"usage",children:"Usage."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-go",children:'result := WitcherModel.UpdateOne(primitive.M{"name": "Vesemir"}, primitive.M{"age": 200}).Upsert().Exec().(*mongo.UpdateResult)\n'})}),"\n",(0,n.jsx)(t.p,{children:'The example above finds a single witcher with the name "Vesemir" and updates their age to 200. If the document does not exist, it will be inserted into the collection.'}),"\n",(0,n.jsx)(t.h2,{id:"usage-with-options",children:"Usage with Options"}),"\n",(0,n.jsxs)(t.p,{children:["You can pass the ",(0,n.jsx)(t.code,{children:"Upsert"})," field as ",(0,n.jsx)(t.code,{children:"true"})," in the ",(0,n.jsx)(t.code,{children:"UpdateOptions"})," to specify that the operation should perform an upsert."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-go",children:'opts := options.UpdateOptions{}\nopts.SetUpsert(true)\nresult := WitcherModel.UpdateOne(primitive.M{"name": "Vesemir"}, primitive.M{"age": 200}, &opts).Exec().(*mongo.UpdateResult)\n'})}),"\n",(0,n.jsxs)(t.p,{children:["In the example above, we are passing options to the ",(0,n.jsx)(t.code,{children:"FindByIDAndUpdate"})," method to return the document after the update operation has been performed."]})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>r});var n=s(6540);const i={},o=n.createContext(i);function r(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}}}]);