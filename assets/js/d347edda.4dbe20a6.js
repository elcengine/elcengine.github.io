"use strict";(self.webpackChunkelcengine=self.webpackChunkelcengine||[]).push([[7869],{9002:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>d,metadata:()=>r,toc:()=>a});var i=n(4848),s=n(8453);const d={sidebar_position:2},o="The Audit Model",r={id:"auditing/the-audit-model",title:"The Audit Model",description:"The Audit model is a special model that is used to log changes to other models. It is used to track changes to documents in the database.",source:"@site/docs/auditing/the-audit-model.md",sourceDirName:"auditing",slug:"/auditing/the-audit-model",permalink:"/docs/auditing/the-audit-model",draft:!1,unlisted:!1,editUrl:"https://github.com/elcengine/elcengine.github.io/tree/main/docs/docs/auditing/the-audit-model.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docSidebar",previous:{title:"Enable Auditing",permalink:"/docs/auditing/enable-auditing"},next:{title:"Plugins",permalink:"/docs/category/plugins"}},c={},a=[];function l(e){const t={code:"code",h1:"h1",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"the-audit-model",children:"The Audit Model"}),"\n",(0,i.jsx)(t.p,{children:"The Audit model is a special model that is used to log changes to other models. It is used to track changes to documents in the database."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'var AuditModel = NewModel[Audit]("Audit", NewSchema(map[string]Field{\n\t"Entity": {\n\t\tType:     reflect.String,\n\t\tRequired: true,\n\t},\n\t"Type": {\n\t\tType: reflect.String,\n\t},\n\t"Document": {\n\t\tType:     reflect.Map,\n\t\tRequired: true,\n\t},\n\t"User": {\n\t\tType: reflect.String,\n\t},\n}, SchemaOptions{\n\tCollection: "audits",\n}))\n'})}),"\n",(0,i.jsx)(t.p,{children:"The above fields can be described as follows:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Entity"}),": The name of the model that was changed."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Type"}),": The type of change that was made. This can be one of the following values: ",(0,i.jsx)(t.code,{children:"insert"}),", ",(0,i.jsx)(t.code,{children:"update"}),", or ",(0,i.jsx)(t.code,{children:"delete"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Document"}),": The document that was changed. This is a map of field names to their values."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"User"}),": The user who made the change. This is read from the context key ",(0,i.jsx)(t.code,{children:"user"})," and you are responsible for setting it. The context can be passed into the ",(0,i.jsx)(t.code,{children:"EnableAuditing"})," method when auditing is enabled."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>r});var i=n(6540);const s={},d=i.createContext(s);function o(e){const t=i.useContext(d);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(d.Provider,{value:t},e.children)}}}]);