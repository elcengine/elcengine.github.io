"use strict";(self.webpackChunkelcengine=self.webpackChunkelcengine||[]).push([[6013],{782:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>n,metadata:()=>o,toc:()=>l});var i=r(4848),s=r(8453);const n={sidebar_position:10},d="Regex",o={id:"querybuilder/regex",title:"Regex",description:"The Regex method is chained to the Where method and is used to filter the results of a query to only include documents where the specified field matches the specified regular expression.",source:"@site/docs/querybuilder/regex.md",sourceDirName:"querybuilder",slug:"/querybuilder/regex",permalink:"/docs/querybuilder/regex",draft:!1,unlisted:!1,editUrl:"https://github.com/elcengine/elcengine.github.io/tree/main/docs/docs/querybuilder/regex.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"docSidebar",previous:{title:"Mod",permalink:"/docs/querybuilder/mod"},next:{title:"Exists",permalink:"/docs/querybuilder/exists"}},c={},l=[{value:"Usage",id:"usage",level:2}];function u(e){const t={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"regex",children:"Regex"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"Regex"})," method is chained to the ",(0,i.jsx)(t.code,{children:"Where"})," method and is used to filter the results of a query to only include documents where the specified field matches the specified regular expression."]}),"\n",(0,i.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'witchers := WitcherModel.Where("name").Regex("^G").ExecTT()\n'})}),"\n",(0,i.jsx)(t.p,{children:'In the example above, we are filtering the results to only include witchers whose name starts with the letter "G".'})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>d});var i=r(6540);const s={},n=i.createContext(s);function d(e){const t=i.useContext(n);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}}}]);