"use strict";(self.webpackChunkelcengine=self.webpackChunkelcengine||[]).push([[5043],{4116:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>a,frontMatter:()=>n,metadata:()=>l,toc:()=>d});var i=s(4848),r=s(8453);const n={sidebar_position:2},o="Equals",l={id:"querybuilder/equals",title:"Equals",description:"The Equals method is chained to the Where method and is used to filter the results of a query to only include documents where the specified field is equal to the specified value.",source:"@site/docs/querybuilder/equals.md",sourceDirName:"querybuilder",slug:"/querybuilder/equals",permalink:"/docs/querybuilder/equals",draft:!1,unlisted:!1,editUrl:"https://github.com/elcengine/elcengine.github.io/tree/main/docs/docs/querybuilder/equals.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docSidebar",previous:{title:"Where",permalink:"/docs/querybuilder/where"},next:{title:"Not Equals",permalink:"/docs/querybuilder/not-equals"}},u={},d=[{value:"Usage",id:"usage",level:2}];function c(e){const t={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"equals",children:"Equals"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"Equals"})," method is chained to the ",(0,i.jsx)(t.code,{children:"Where"})," method and is used to filter the results of a query to only include documents where the specified field is equal to the specified value."]}),"\n",(0,i.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'witchers := WitcherModel.Where("school").Equals("wolf").Exec().([]Witcher)\n'})}),"\n",(0,i.jsx)(t.p,{children:"In the example above, we are filtering the results to only include witchers from the Wolf school."})]})}function a(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>o});var i=s(6540);const r={},n=i.createContext(r);function o(e){const t=i.useContext(n);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}}}]);