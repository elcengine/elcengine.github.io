"use strict";(self.webpackChunkelcengine=self.webpackChunkelcengine||[]).push([[4250],{8453:(e,t,n)=>{n.d(t,{R:()=>c});var i=n(6540);const a={},o=i.createContext(a);function c(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}},9681:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>s});var i=n(4848),a=n(8453);const o={sidebar_position:5},c="Create a Model",r={id:"getting-started/create-a-model",title:"Create a Model",description:"Model creation is a part of the elemental core package which can be imported as follows:",source:"@site/docs/getting-started/create-a-model.md",sourceDirName:"getting-started",slug:"/getting-started/create-a-model",permalink:"/docs/getting-started/create-a-model",draft:!1,unlisted:!1,editUrl:"https://github.com/elcengine/elcengine.github.io/tree/main/docs/docs/getting-started/create-a-model.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"docSidebar",previous:{title:"Create a Schema",permalink:"/docs/getting-started/create-a-schema"},next:{title:"Basic Operations",permalink:"/docs/category/basic-operations"}},d={},s=[{value:"Using a Model",id:"using-a-model",level:2},{value:"Insert a Document",id:"insert-a-document",level:3},{value:"Find Documents",id:"find-documents",level:3},{value:"Find a Document",id:"find-a-document",level:3},{value:"Update a Document",id:"update-a-document",level:3},{value:"Delete a Document",id:"delete-a-document",level:3},{value:"The Native Model",id:"the-native-model",level:2}];function l(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"create-a-model",children:"Create a Model"}),"\n",(0,i.jsxs)(t.p,{children:["Model creation is a part of the ",(0,i.jsx)(t.code,{children:"elemental"})," core package which can be imported as follows:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'import "github.com/elcengine/elemental/core"\n'})}),"\n",(0,i.jsxs)(t.p,{children:["A model is the primary interface for interacting with your data. It represents a single instance of your data model and provides methods for querying data with ease. In Elemental, you can define a model using the ",(0,i.jsx)(t.code,{children:"elemental"})," package."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'type Witcher struct {\n\tID         primitive.ObjectID `json:"_id" bson:"_id"`\n\tName       string             `json:"name" bson:"name"`\n\tAge        int                `json:"age" bson:"age"`\n\tOccupation string             `json:"occupation" bson:"occupation,omitempty"`\n\tWeapons    []string           `json:"weapons" bson:"weapons"`\n\tRetired    bool               `json:"retired" bson:"retired"`\n\tSchool     *string            `json:"school" bson:"school"`\n\tCreatedAt  time.Time          `json:"created_at" bson:"created_at"`\n\tUpdatedAt  time.Time          `json:"updated_at" bson:"updated_at"`\n}\nWitcherModel := elemental.NewModel[Witcher]("Witcher", schema)\n'})}),"\n",(0,i.jsx)(t.h2,{id:"using-a-model",children:"Using a Model"}),"\n",(0,i.jsx)(t.p,{children:"Once you have defined a model, you can use it to interact with your MongoDB collection. Here are some common operations you can perform with a model:"}),"\n",(0,i.jsx)(t.h3,{id:"insert-a-document",children:"Insert a Document"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'witcher := WitcherModel.Create(Witcher{\n\tName:       "Geralt of Rivia",\n\tAge:        100,\n\tOccupation: "Witcher",\n\tWeapons:    []string{"Silver Sword", "Steel Sword"},\n\tRetired:    false,\n\tSchool:     nil\n}).Exec().(Witcher)\n\nfmt.Println(witcher.ID) // The ObjectID of the newly created document\nfmt.Println(witcher.CreatedAt) // The timestamp when the document was created\nfmt.Println(witcher.UpdatedAt) // The timestamp when the document was last updated\n'})}),"\n",(0,i.jsx)(t.h3,{id:"find-documents",children:"Find Documents"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:"witchers := WitcherModel.Find().Exec().([]Witcher)\n\nfor _, witcher := range witchers {\n\tfmt.Println(witcher.Name) // The name of each document\n}\n"})}),"\n",(0,i.jsx)(t.h3,{id:"find-a-document",children:"Find a Document"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'witcher := WitcherModel.FindOne(Witcher{\n\tName: "Geralt of Rivia",\n}).Exec().(*Witcher)\n\nfmt.Println(witcher.ID) // The ObjectID of the found document\n'})}),"\n",(0,i.jsx)(t.h3,{id:"update-a-document",children:"Update a Document"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'witcher := WitcherModel.FindOne(Witcher{\n\tName: "Geralt of Rivia",\n}).Exec().(*Witcher)\n\nupdatedWitcher := WitcherModel.UpdateByID(witcher.ID, Witcher{\n\tName: "White Wolf",\n}).Exec().(*Witcher)\n\nfmt.Println(updatedWitcher.Name) // The updated name of the document as White Wolf\n'})}),"\n",(0,i.jsx)(t.h3,{id:"delete-a-document",children:"Delete a Document"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'witcher := WitcherModel.Find(Witcher{\n\tName: "White Wolf",\n}).Exec().(*Witcher)\n\nWitcherModel.DeleteByID(witcher.ID).Exec()\n'})}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Note:"})," The above examples are just a few of the many operations you can perform with a model. For a complete list of operations, refer to each of their individual sections under ",(0,i.jsxs)(t.strong,{children:[(0,i.jsx)(t.a,{href:"/docs/category/basic-operations",children:"Basic Queries"})," and ",(0,i.jsx)(t.a,{href:"/docs/category/querybuilder",children:"Querybuilder"})]}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"the-native-model",children:"The Native Model"}),"\n",(0,i.jsxs)(t.p,{children:["Elemental provides a pre-defined model called ",(0,i.jsx)(t.code,{children:"NativeModel"})," which can be used to interact with your MongoDB collection without defining a custom model. The ",(0,i.jsx)(t.code,{children:"NativeModel"})," is of type ",(0,i.jsx)(t.code,{children:"map[string]interface{}"})," and can be used to access all API methods provided by Elemental."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'witchers := elemental.NativeModel.SetCollection("witchers").Find().Exec().([]map[string]interface{})\n'})})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);